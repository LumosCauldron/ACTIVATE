#ifndef BITS_H
#define BITS_H
#include <stdint.h>
//************************************SETBIT************************************//

#define SETBIT63(x) (((x) |= 0b1000000000000000000000000000000000000000000000000000000000000000))
#define SETBIT62(x) (((x) |= 0b0100000000000000000000000000000000000000000000000000000000000000))
#define SETBIT61(x) (((x) |= 0b0010000000000000000000000000000000000000000000000000000000000000))
#define SETBIT60(x) (((x) |= 0b0001000000000000000000000000000000000000000000000000000000000000))
#define SETBIT59(x) (((x) |= 0b0000100000000000000000000000000000000000000000000000000000000000))
#define SETBIT58(x) (((x) |= 0b0000010000000000000000000000000000000000000000000000000000000000))
#define SETBIT57(x) (((x) |= 0b0000001000000000000000000000000000000000000000000000000000000000))
#define SETBIT56(x) (((x) |= 0b0000000100000000000000000000000000000000000000000000000000000000))

#define SETBIT55(x) (((x) |= 0b0000000010000000000000000000000000000000000000000000000000000000))
#define SETBIT54(x) (((x) |= 0b0000000001000000000000000000000000000000000000000000000000000000))
#define SETBIT53(x) (((x) |= 0b0000000000100000000000000000000000000000000000000000000000000000))
#define SETBIT52(x) (((x) |= 0b0000000000010000000000000000000000000000000000000000000000000000))
#define SETBIT51(x) (((x) |= 0b0000000000001000000000000000000000000000000000000000000000000000))
#define SETBIT50(x) (((x) |= 0b0000000000000100000000000000000000000000000000000000000000000000))
#define SETBIT49(x) (((x) |= 0b0000000000000010000000000000000000000000000000000000000000000000))
#define SETBIT48(x) (((x) |= 0b0000000000000001000000000000000000000000000000000000000000000000))

#define SETBIT47(x) (((x) |= 0b0000000000000000100000000000000000000000000000000000000000000000))
#define SETBIT46(x) (((x) |= 0b0000000000000000010000000000000000000000000000000000000000000000))
#define SETBIT45(x) (((x) |= 0b0000000000000000001000000000000000000000000000000000000000000000))
#define SETBIT44(x) (((x) |= 0b0000000000000000000100000000000000000000000000000000000000000000))
#define SETBIT43(x) (((x) |= 0b0000000000000000000010000000000000000000000000000000000000000000))
#define SETBIT42(x) (((x) |= 0b0000000000000000000001000000000000000000000000000000000000000000))
#define SETBIT41(x) (((x) |= 0b0000000000000000000000100000000000000000000000000000000000000000))
#define SETBIT40(x) (((x) |= 0b0000000000000000000000010000000000000000000000000000000000000000))

#define SETBIT39(x) (((x) |= 0b0000000000000000000000001000000000000000000000000000000000000000))
#define SETBIT38(x) (((x) |= 0b0000000000000000000000000100000000000000000000000000000000000000))
#define SETBIT37(x) (((x) |= 0b0000000000000000000000000010000000000000000000000000000000000000))
#define SETBIT36(x) (((x) |= 0b0000000000000000000000000001000000000000000000000000000000000000))
#define SETBIT35(x) (((x) |= 0b0000000000000000000000000000100000000000000000000000000000000000))
#define SETBIT34(x) (((x) |= 0b0000000000000000000000000000010000000000000000000000000000000000))
#define SETBIT33(x) (((x) |= 0b0000000000000000000000000000001000000000000000000000000000000000))
#define SETBIT32(x) (((x) |= 0b0000000000000000000000000000000100000000000000000000000000000000))

#define SETBIT31(x) (((x) |= 0b10000000000000000000000000000000))
#define SETBIT30(x) (((x) |= 0b01000000000000000000000000000000))
#define SETBIT29(x) (((x) |= 0b00100000000000000000000000000000))
#define SETBIT28(x) (((x) |= 0b00010000000000000000000000000000))
#define SETBIT27(x) (((x) |= 0b00001000000000000000000000000000))
#define SETBIT26(x) (((x) |= 0b00000100000000000000000000000000))
#define SETBIT25(x) (((x) |= 0b00000010000000000000000000000000))
#define SETBIT24(x) (((x) |= 0b00000001000000000000000000000000))

#define SETBIT23(x) (((x) |= 0b00000000100000000000000000000000))
#define SETBIT22(x) (((x) |= 0b00000000010000000000000000000000))
#define SETBIT21(x) (((x) |= 0b00000000001000000000000000000000))
#define SETBIT20(x) (((x) |= 0b00000000000100000000000000000000))
#define SETBIT19(x) (((x) |= 0b00000000000010000000000000000000))
#define SETBIT18(x) (((x) |= 0b00000000000001000000000000000000))
#define SETBIT17(x) (((x) |= 0b00000000000000100000000000000000))
#define SETBIT16(x) (((x) |= 0b00000000000000010000000000000000))

#define SETBIT15(x) (((x) |= 0b1000000000000000))
#define SETBIT14(x) (((x) |= 0b0100000000000000))
#define SETBIT13(x) (((x) |= 0b0010000000000000))
#define SETBIT12(x) (((x) |= 0b0001000000000000))
#define SETBIT11(x) (((x) |= 0b0000100000000000))
#define SETBIT10(x) (((x) |= 0b0000010000000000))
#define SETBIT9(x)  (((x) |= 0b0000001000000000))
#define SETBIT8(x)  (((x) |= 0b0000000100000000))

#define SETBIT7(x)  (((x) |= 0b10000000))
#define SETBIT6(x)  (((x) |= 0b01000000))
#define SETBIT5(x)  (((x) |= 0b00100000))
#define SETBIT4(x)  (((x) |= 0b00010000))
#define SETBIT3(x)  (((x) |= 0b00001000))
#define SETBIT2(x)  (((x) |= 0b00000100))
#define SETBIT1(x)  (((x) |= 0b00000010))
#define SETBIT0(x)  (((x) |= 0b00000001))

//************************************CLEARBIT************************************//

#define CLEARBIT63(x) (((x) &= 0b0111111111111111111111111111111111111111111111111111111111111111))
#define CLEARBIT62(x) (((x) &= 0b1011111111111111111111111111111111111111111111111111111111111111))
#define CLEARBIT61(x) (((x) &= 0b1101111111111111111111111111111111111111111111111111111111111111))
#define CLEARBIT60(x) (((x) &= 0b1110111111111111111111111111111111111111111111111111111111111111))
#define CLEARBIT59(x) (((x) &= 0b1111011111111111111111111111111111111111111111111111111111111111))
#define CLEARBIT58(x) (((x) &= 0b1111101111111111111111111111111111111111111111111111111111111111))
#define CLEARBIT57(x) (((x) &= 0b1111110111111111111111111111111111111111111111111111111111111111))
#define CLEARBIT56(x) (((x) &= 0b1111111011111111111111111111111111111111111111111111111111111111))

#define CLEARBIT55(x) (((x) &= 0b1111111101111111111111111111111111111111111111111111111111111111))
#define CLEARBIT54(x) (((x) &= 0b1111111110111111111111111111111111111111111111111111111111111111))
#define CLEARBIT53(x) (((x) &= 0b1111111111011111111111111111111111111111111111111111111111111111))
#define CLEARBIT52(x) (((x) &= 0b1111111111101111111111111111111111111111111111111111111111111111))
#define CLEARBIT51(x) (((x) &= 0b1111111111110111111111111111111111111111111111111111111111111111))
#define CLEARBIT50(x) (((x) &= 0b1111111111111011111111111111111111111111111111111111111111111111))
#define CLEARBIT49(x) (((x) &= 0b1111111111111101111111111111111111111111111111111111111111111111))
#define CLEARBIT48(x) (((x) &= 0b1111111111111110111111111111111111111111111111111111111111111111))

#define CLEARBIT47(x) (((x) &= 0b1111111111111111011111111111111111111111111111111111111111111111))
#define CLEARBIT46(x) (((x) &= 0b1111111111111111101111111111111111111111111111111111111111111111))
#define CLEARBIT45(x) (((x) &= 0b1111111111111111110111111111111111111111111111111111111111111111))
#define CLEARBIT44(x) (((x) &= 0b1111111111111111111011111111111111111111111111111111111111111111))
#define CLEARBIT43(x) (((x) &= 0b1111111111111111111101111111111111111111111111111111111111111111))
#define CLEARBIT42(x) (((x) &= 0b1111111111111111111110111111111111111111111111111111111111111111))
#define CLEARBIT41(x) (((x) &= 0b1111111111111111111111011111111111111111111111111111111111111111))
#define CLEARBIT40(x) (((x) &= 0b1111111111111111111111101111111111111111111111111111111111111111))

#define CLEARBIT39(x) (((x) &= 0b1111111111111111111111110111111111111111111111111111111111111111))
#define CLEARBIT38(x) (((x) &= 0b1111111111111111111111111011111111111111111111111111111111111111))
#define CLEARBIT37(x) (((x) &= 0b1111111111111111111111111101111111111111111111111111111111111111))
#define CLEARBIT36(x) (((x) &= 0b1111111111111111111111111110111111111111111111111111111111111111))
#define CLEARBIT35(x) (((x) &= 0b1111111111111111111111111111011111111111111111111111111111111111))
#define CLEARBIT34(x) (((x) &= 0b1111111111111111111111111111101111111111111111111111111111111111))
#define CLEARBIT33(x) (((x) &= 0b1111111111111111111111111111110111111111111111111111111111111111))
#define CLEARBIT32(x) (((x) &= 0b1111111111111111111111111111111011111111111111111111111111111111))

#define CLEARBIT31(x) (((x) &= 0b01111111111111111111111111111111))
#define CLEARBIT30(x) (((x) &= 0b10111111111111111111111111111111))
#define CLEARBIT29(x) (((x) &= 0b11011111111111111111111111111111))
#define CLEARBIT28(x) (((x) &= 0b11101111111111111111111111111111))
#define CLEARBIT27(x) (((x) &= 0b11110111111111111111111111111111))
#define CLEARBIT26(x) (((x) &= 0b11111011111111111111111111111111))
#define CLEARBIT25(x) (((x) &= 0b11111101111111111111111111111111))
#define CLEARBIT24(x) (((x) &= 0b11111110111111111111111111111111))

#define CLEARBIT23(x) (((x) &= 0b11111111011111111111111111111111))
#define CLEARBIT22(x) (((x) &= 0b11111111101111111111111111111111))
#define CLEARBIT21(x) (((x) &= 0b11111111110111111111111111111111))
#define CLEARBIT20(x) (((x) &= 0b11111111111011111111111111111111))
#define CLEARBIT19(x) (((x) &= 0b11111111111101111111111111111111))
#define CLEARBIT18(x) (((x) &= 0b11111111111110111111111111111111))
#define CLEARBIT17(x) (((x) &= 0b11111111111111011111111111111111))
#define CLEARBIT16(x) (((x) &= 0b11111111111111101111111111111111))

#define CLEARBIT15(x) (((x) &= 0b0111111111111111))
#define CLEARBIT14(x) (((x) &= 0b1011111111111111))
#define CLEARBIT13(x) (((x) &= 0b1101111111111111))
#define CLEARBIT12(x) (((x) &= 0b1110111111111111))
#define CLEARBIT11(x) (((x) &= 0b1111011111111111))
#define CLEARBIT10(x) (((x) &= 0b1111101111111111))
#define CLEARBIT9(x)  (((x) &= 0b1111110111111111))
#define CLEARBIT8(x)  (((x) &= 0b1111111011111111))

#define CLEARBIT7(x)  (((x) &= 0b01111111))
#define CLEARBIT6(x)  (((x) &= 0b10111111))
#define CLEARBIT5(x)  (((x) &= 0b11011111))
#define CLEARBIT4(x)  (((x) &= 0b11101111))
#define CLEARBIT3(x)  (((x) &= 0b11110111))
#define CLEARBIT2(x)  (((x) &= 0b11111011))
#define CLEARBIT1(x)  (((x) &= 0b11111101))
#define CLEARBIT0(x)  (((x) &= 0b11111110))

//************************************GETBIT************************************//

#define GETBIT63(x) (((x) & 0b1000000000000000000000000000000000000000000000000000000000000000))
#define GETBIT62(x) (((x) & 0b0100000000000000000000000000000000000000000000000000000000000000))
#define GETBIT61(x) (((x) & 0b0010000000000000000000000000000000000000000000000000000000000000))
#define GETBIT60(x) (((x) & 0b0001000000000000000000000000000000000000000000000000000000000000))
#define GETBIT59(x) (((x) & 0b0000100000000000000000000000000000000000000000000000000000000000))
#define GETBIT58(x) (((x) & 0b0000010000000000000000000000000000000000000000000000000000000000))
#define GETBIT57(x) (((x) & 0b0000001000000000000000000000000000000000000000000000000000000000))
#define GETBIT56(x) (((x) & 0b0000000100000000000000000000000000000000000000000000000000000000))

#define GETBIT55(x) (((x) & 0b0000000010000000000000000000000000000000000000000000000000000000))
#define GETBIT54(x) (((x) & 0b0000000001000000000000000000000000000000000000000000000000000000))
#define GETBIT53(x) (((x) & 0b0000000000100000000000000000000000000000000000000000000000000000))
#define GETBIT52(x) (((x) & 0b0000000000010000000000000000000000000000000000000000000000000000))
#define GETBIT51(x) (((x) & 0b0000000000001000000000000000000000000000000000000000000000000000))
#define GETBIT50(x) (((x) & 0b0000000000000100000000000000000000000000000000000000000000000000))
#define GETBIT49(x) (((x) & 0b0000000000000010000000000000000000000000000000000000000000000000))
#define GETBIT48(x) (((x) & 0b0000000000000001000000000000000000000000000000000000000000000000))

#define GETBIT47(x) (((x) & 0b0000000000000000100000000000000000000000000000000000000000000000))
#define GETBIT46(x) (((x) & 0b0000000000000000010000000000000000000000000000000000000000000000))
#define GETBIT45(x) (((x) & 0b0000000000000000001000000000000000000000000000000000000000000000))
#define GETBIT44(x) (((x) & 0b0000000000000000000100000000000000000000000000000000000000000000))
#define GETBIT43(x) (((x) & 0b0000000000000000000010000000000000000000000000000000000000000000))
#define GETBIT42(x) (((x) & 0b0000000000000000000001000000000000000000000000000000000000000000))
#define GETBIT41(x) (((x) & 0b0000000000000000000000100000000000000000000000000000000000000000))
#define GETBIT40(x) (((x) & 0b0000000000000000000000010000000000000000000000000000000000000000))

#define GETBIT39(x) (((x) & 0b0000000000000000000000001000000000000000000000000000000000000000))
#define GETBIT38(x) (((x) & 0b0000000000000000000000000100000000000000000000000000000000000000))
#define GETBIT37(x) (((x) & 0b0000000000000000000000000010000000000000000000000000000000000000))
#define GETBIT36(x) (((x) & 0b0000000000000000000000000001000000000000000000000000000000000000))
#define GETBIT35(x) (((x) & 0b0000000000000000000000000000100000000000000000000000000000000000))
#define GETBIT34(x) (((x) & 0b0000000000000000000000000000010000000000000000000000000000000000))
#define GETBIT33(x) (((x) & 0b0000000000000000000000000000001000000000000000000000000000000000))
#define GETBIT32(x) (((x) & 0b0000000000000000000000000000000100000000000000000000000000000000))

#define GETBIT31(x) (((x) & 0b10000000000000000000000000000000))
#define GETBIT30(x) (((x) & 0b01000000000000000000000000000000))
#define GETBIT29(x) (((x) & 0b00100000000000000000000000000000))
#define GETBIT28(x) (((x) & 0b00010000000000000000000000000000))
#define GETBIT27(x) (((x) & 0b00001000000000000000000000000000))
#define GETBIT26(x) (((x) & 0b00000100000000000000000000000000))
#define GETBIT25(x) (((x) & 0b00000010000000000000000000000000))
#define GETBIT24(x) (((x) & 0b00000001000000000000000000000000))

#define GETBIT23(x) (((x) & 0b00000000100000000000000000000000))
#define GETBIT22(x) (((x) & 0b00000000010000000000000000000000))
#define GETBIT21(x) (((x) & 0b00000000001000000000000000000000))
#define GETBIT20(x) (((x) & 0b00000000000100000000000000000000))
#define GETBIT19(x) (((x) & 0b00000000000010000000000000000000))
#define GETBIT18(x) (((x) & 0b00000000000001000000000000000000))
#define GETBIT17(x) (((x) & 0b00000000000000100000000000000000))
#define GETBIT16(x) (((x) & 0b00000000000000010000000000000000))

#define GETBIT15(x) (((x) & 0b1000000000000000))
#define GETBIT14(x) (((x) & 0b0100000000000000))
#define GETBIT13(x) (((x) & 0b0010000000000000))
#define GETBIT12(x) (((x) & 0b0001000000000000))
#define GETBIT11(x) (((x) & 0b0000100000000000))
#define GETBIT10(x) (((x) & 0b0000010000000000))
#define GETBIT9(x)  (((x) & 0b0000001000000000))
#define GETBIT8(x)  (((x) & 0b0000000100000000))

#define GETBIT7(x)  (((x) & 0b10000000))
#define GETBIT6(x)  (((x) & 0b01000000))
#define GETBIT5(x)  (((x) & 0b00100000))
#define GETBIT4(x)  (((x) & 0b00010000))
#define GETBIT3(x)  (((x) & 0b00001000))
#define GETBIT2(x)  (((x) & 0b00000100))
#define GETBIT1(x)  (((x) & 0b00000010))
#define GETBIT0(x)  (((x) & 0b00000001))

//************************************SETBYTE************************************//

#define SETBYTE0(reg, val) ((reg) |= (val))
#define SETBYTE1(reg, val) ((reg) |= ((val) <<  8))
#define SETBYTE2(reg, val) ((reg) |= ((val) << 16))
#define SETBYTE3(reg, val) ((reg) |= ((val) << 24))
#define SETBYTE4(reg, val) ((reg) |= ((val) << 32))
#define SETBYTE5(reg, val) ((reg) |= ((val) << 40))
#define SETBYTE6(reg, val) ((reg) |= ((val) << 48))
#define SETBYTE7(reg, val) ((reg) |= ((val) << 56))

//************************************CLEARBYTE************************************//

#define CLEARBYTE0(reg) ((reg) &= 0b1111111111111111111111111111111111111111111111111111111100000000)
#define CLEARBYTE1(reg) ((reg) &= 0b1111111111111111111111111111111111111111111111110000000011111111)
#define CLEARBYTE2(reg) ((reg) &= 0b1111111111111111111111111111111111111111000000001111111111111111)
#define CLEARBYTE3(reg) ((reg) &= 0b1111111111111111111111111111111100000000111111111111111111111111)
#define CLEARBYTE4(reg) ((reg) &= 0b1111111111111111111111110000000011111111111111111111111111111111)
#define CLEARBYTE5(reg) ((reg) &= 0b1111111111111111000000001111111111111111111111111111111111111111)
#define CLEARBYTE6(reg) ((reg) &= 0b1111111100000000111111111111111111111111111111111111111111111111)
#define CLEARBYTE7(reg) ((reg) &= 0b0000000011111111111111111111111111111111111111111111111111111111)

//************************************CLEARSETBYTE************************************//

#define CLEARSETBYTE0(reg, val) ((reg) = ((reg) ^ (reg)) | (val))
#define CLEARSETBYTE1(reg, val) ((reg) = ((reg) ^ (reg)) | ((val) <<  8))
#define CLEARSETBYTE2(reg, val) ((reg) = ((reg) ^ (reg)) | ((val) << 16))
#define CLEARSETBYTE3(reg, val) ((reg) = ((reg) ^ (reg)) | ((val) << 24))
#define CLEARSETBYTE4(reg, val) ((reg) = ((reg) ^ (reg)) | ((val) << 32))
#define CLEARSETBYTE5(reg, val) ((reg) = ((reg) ^ (reg)) | ((val) << 40))
#define CLEARSETBYTE6(reg, val) ((reg) = ((reg) ^ (reg)) | ((val) << 48))
#define CLEARSETBYTE7(reg, val) ((reg) = ((reg) ^ (reg)) | ((val) << 56))

//************************************GETBYTE************************************//

#define GETBYTE0(reg) ((reg) & 0b0000000000000000000000000000000000000000000000000000000011111111)
#define GETBYTE1(reg) ((reg) & 0b0000000000000000000000000000000000000000000000001111111100000000)
#define GETBYTE2(reg) ((reg) & 0b0000000000000000000000000000000000000000111111110000000000000000)
#define GETBYTE3(reg) ((reg) & 0b0000000000000000000000000000000011111111000000000000000000000000)
#define GETBYTE4(reg) ((reg) & 0b0000000000000000000000001111111100000000000000000000000000000000)
#define GETBYTE5(reg) ((reg) & 0b0000000000000000111111110000000000000000000000000000000000000000)
#define GETBYTE6(reg) ((reg) & 0b0000000011111111000000000000000000000000000000000000000000000000)
#define GETBYTE7(reg) ((reg) & 0b1111111100000000000000000000000000000000000000000000000000000000)

//************************************GETBYTE_C************************************//

#define GETBYTE0_C(reg) (((reg) & 0b0000000000000000000000000000000000000000000000000000000011111111))
#define GETBYTE1_C(reg) (((reg) & 0b0000000000000000000000000000000000000000000000001111111100000000) >>  8)
#define GETBYTE2_C(reg) (((reg) & 0b0000000000000000000000000000000000000000111111110000000000000000) >> 16)
#define GETBYTE3_C(reg) (((reg) & 0b0000000000000000000000000000000011111111000000000000000000000000) >> 24)
#define GETBYTE4_C(reg) (((reg) & 0b0000000000000000000000001111111100000000000000000000000000000000) >> 32)
#define GETBYTE5_C(reg) (((reg) & 0b0000000000000000111111110000000000000000000000000000000000000000) >> 40)
#define GETBYTE6_C(reg) (((reg) & 0b0000000011111111000000000000000000000000000000000000000000000000) >> 48)
#define GETBYTE7_C(reg) (((reg) & 0b1111111100000000000000000000000000000000000000000000000000000000) >> 56)

//************************************GETBYTE_AS_BYTE************************************//

#define GETBYTE0_AS_BYTE1(reg) (((reg) & 0b0000000000000000000000000000000000000000000000000000000011111111) <<  8)
#define GETBYTE0_AS_BYTE2(reg) (((reg) & 0b0000000000000000000000000000000000000000000000000000000011111111) << 16)
#define GETBYTE0_AS_BYTE3(reg) (((reg) & 0b0000000000000000000000000000000000000000000000000000000011111111) << 24)
#define GETBYTE0_AS_BYTE4(reg) (((reg) & 0b0000000000000000000000000000000000000000000000000000000011111111) << 32)
#define GETBYTE0_AS_BYTE5(reg) (((reg) & 0b0000000000000000000000000000000000000000000000000000000011111111) << 40)
#define GETBYTE0_AS_BYTE6(reg) (((reg) & 0b0000000000000000000000000000000000000000000000000000000011111111) << 48)
#define GETBYTE0_AS_BYTE7(reg) (((reg) & 0b0000000000000000000000000000000000000000000000000000000011111111) << 56)

#define GETBYTE1_AS_BYTE0(reg) (((reg) & 0b0000000000000000000000000000000000000000000000001111111100000000) >>  8)
#define GETBYTE1_AS_BYTE2(reg) (((reg) & 0b0000000000000000000000000000000000000000000000001111111100000000) <<  8)
#define GETBYTE1_AS_BYTE3(reg) (((reg) & 0b0000000000000000000000000000000000000000000000001111111100000000) << 16)
#define GETBYTE1_AS_BYTE4(reg) (((reg) & 0b0000000000000000000000000000000000000000000000001111111100000000) << 24)
#define GETBYTE1_AS_BYTE5(reg) (((reg) & 0b0000000000000000000000000000000000000000000000001111111100000000) << 32)
#define GETBYTE1_AS_BYTE6(reg) (((reg) & 0b0000000000000000000000000000000000000000000000001111111100000000) << 40)
#define GETBYTE1_AS_BYTE7(reg) (((reg) & 0b0000000000000000000000000000000000000000000000001111111100000000) << 48)

#define GETBYTE2_AS_BYTE0(reg) (((reg) & 0b0000000000000000000000000000000000000000111111110000000000000000) >> 16)
#define GETBYTE2_AS_BYTE1(reg) (((reg) & 0b0000000000000000000000000000000000000000111111110000000000000000) >>  8)
#define GETBYTE2_AS_BYTE3(reg) (((reg) & 0b0000000000000000000000000000000000000000111111110000000000000000) <<  8)
#define GETBYTE2_AS_BYTE4(reg) (((reg) & 0b0000000000000000000000000000000000000000111111110000000000000000) << 16)
#define GETBYTE2_AS_BYTE5(reg) (((reg) & 0b0000000000000000000000000000000000000000111111110000000000000000) << 24)
#define GETBYTE2_AS_BYTE6(reg) (((reg) & 0b0000000000000000000000000000000000000000111111110000000000000000) << 32)
#define GETBYTE2_AS_BYTE7(reg) (((reg) & 0b0000000000000000000000000000000000000000111111110000000000000000) << 40)

#define GETBYTE3_AS_BYTE0(reg) (((reg) & 0b0000000000000000000000000000000011111111000000000000000000000000) >> 24)
#define GETBYTE3_AS_BYTE1(reg) (((reg) & 0b0000000000000000000000000000000011111111000000000000000000000000) >> 16)
#define GETBYTE3_AS_BYTE2(reg) (((reg) & 0b0000000000000000000000000000000011111111000000000000000000000000) >>  8)
#define GETBYTE3_AS_BYTE4(reg) (((reg) & 0b0000000000000000000000000000000011111111000000000000000000000000) <<  8)
#define GETBYTE3_AS_BYTE5(reg) (((reg) & 0b0000000000000000000000000000000011111111000000000000000000000000) << 16)
#define GETBYTE3_AS_BYTE6(reg) (((reg) & 0b0000000000000000000000000000000011111111000000000000000000000000) << 24)
#define GETBYTE3_AS_BYTE7(reg) (((reg) & 0b0000000000000000000000000000000011111111000000000000000000000000) << 32)

#define GETBYTE4_AS_BYTE0(reg) (((reg) & 0b0000000000000000000000001111111100000000000000000000000000000000) >> 32)
#define GETBYTE4_AS_BYTE1(reg) (((reg) & 0b0000000000000000000000001111111100000000000000000000000000000000) >> 24)
#define GETBYTE4_AS_BYTE2(reg) (((reg) & 0b0000000000000000000000001111111100000000000000000000000000000000) >> 16)
#define GETBYTE4_AS_BYTE3(reg) (((reg) & 0b0000000000000000000000001111111100000000000000000000000000000000) >>  8)
#define GETBYTE4_AS_BYTE5(reg) (((reg) & 0b0000000000000000000000001111111100000000000000000000000000000000) <<  8)
#define GETBYTE4_AS_BYTE6(reg) (((reg) & 0b0000000000000000000000001111111100000000000000000000000000000000) << 16)
#define GETBYTE4_AS_BYTE7(reg) (((reg) & 0b0000000000000000000000001111111100000000000000000000000000000000) << 24)

#define GETBYTE5_AS_BYTE0(reg) (((reg) & 0b0000000000000000111111110000000000000000000000000000000000000000) >> 40)
#define GETBYTE5_AS_BYTE1(reg) (((reg) & 0b0000000000000000111111110000000000000000000000000000000000000000) >> 32)
#define GETBYTE5_AS_BYTE2(reg) (((reg) & 0b0000000000000000111111110000000000000000000000000000000000000000) >> 24)
#define GETBYTE5_AS_BYTE3(reg) (((reg) & 0b0000000000000000111111110000000000000000000000000000000000000000) >> 16)
#define GETBYTE5_AS_BYTE4(reg) (((reg) & 0b0000000000000000111111110000000000000000000000000000000000000000) >>  8)
#define GETBYTE5_AS_BYTE6(reg) (((reg) & 0b0000000000000000111111110000000000000000000000000000000000000000) <<  8)
#define GETBYTE5_AS_BYTE7(reg) (((reg) & 0b0000000000000000111111110000000000000000000000000000000000000000) << 16)

#define GETBYTE6_AS_BYTE0(reg) (((reg) & 0b0000000011111111000000000000000000000000000000000000000000000000) >> 48)
#define GETBYTE6_AS_BYTE1(reg) (((reg) & 0b0000000011111111000000000000000000000000000000000000000000000000) >> 40)
#define GETBYTE6_AS_BYTE2(reg) (((reg) & 0b0000000011111111000000000000000000000000000000000000000000000000) >> 32)
#define GETBYTE6_AS_BYTE3(reg) (((reg) & 0b0000000011111111000000000000000000000000000000000000000000000000) >> 24)
#define GETBYTE6_AS_BYTE4(reg) (((reg) & 0b0000000011111111000000000000000000000000000000000000000000000000) >> 16)
#define GETBYTE6_AS_BYTE5(reg) (((reg) & 0b0000000011111111000000000000000000000000000000000000000000000000) >>  8)
#define GETBYTE6_AS_BYTE7(reg) (((reg) & 0b0000000011111111000000000000000000000000000000000000000000000000) <<  8)

#define GETBYTE7_AS_BYTE0(reg) (((reg) & 0b1111111100000000000000000000000000000000000000000000000000000000) >> 56)
#define GETBYTE7_AS_BYTE1(reg) (((reg) & 0b1111111100000000000000000000000000000000000000000000000000000000) >> 48)
#define GETBYTE7_AS_BYTE2(reg) (((reg) & 0b1111111100000000000000000000000000000000000000000000000000000000) >> 40)
#define GETBYTE7_AS_BYTE3(reg) (((reg) & 0b1111111100000000000000000000000000000000000000000000000000000000) >> 32)
#define GETBYTE7_AS_BYTE4(reg) (((reg) & 0b1111111100000000000000000000000000000000000000000000000000000000) >> 24)
#define GETBYTE7_AS_BYTE5(reg) (((reg) & 0b1111111100000000000000000000000000000000000000000000000000000000) >> 16)
#define GETBYTE7_AS_BYTE6(reg) (((reg) & 0b1111111100000000000000000000000000000000000000000000000000000000) >>  8)

//************************************OPS************************************//

#define INVERT(x)   		 ((~(x)))
#define ROTATERIGHT_64BIT(reg, offset) ((reg) = (reg) >> (offset) | (reg) << (64 - (offset)))
#define ROTATELEFT_64BIT(reg, offset)  ((reg) = (reg) << (offset) | (reg) >> (64 - (offset)))
#define ROTATERIGHT_32BIT(reg, offset) ((reg) = (reg) >> (offset) | (reg) << (32 - (offset)))
#define ROTATELEFT_32BIT(reg, offset)  ((reg) = (reg) << (offset) | (reg) >> (32 - (offset)))
#define ROTATERIGHT_16BIT(reg, offset) ((reg) = (reg) >> (offset) | (reg) << (16 - (offset)))
#define ROTATELEFT_16BIT(reg, offset)  ((reg) = (reg) << (offset) | (reg) >> (16 - (offset)))
#define ROTATERIGHT_8BIT(reg, offset)  ((reg) = (reg) >> (offset) | (reg) << ( 8 - (offset)))
#define ROTATELEFT_8BIT(reg, offset)   ((reg) = (reg) << (offset) | (reg) >> ( 8 - (offset)))

#define RADICALROTATERIGHT(reg, offset, fieldsz) ((reg) = (reg) >> (offset) | (reg) << ((fieldsz) - (offset)))
#define RADICALROTATELEFT(reg, offset, fieldsz)  ((reg) = (reg) << (offset) | (reg) >> ((fieldsz) - (offset)))

void REVERSE8(uint8_t* x)	// Cool
{
	register uint8_t H0  = *x;
	register uint8_t b0  = GETBIT0(H0);
	register uint8_t b1  = GETBIT1(H0);
	register uint8_t b2  = GETBIT2(H0);
	register uint8_t b3  = GETBIT3(H0);
	register uint8_t b4  = GETBIT4(H0);
	register uint8_t b5  = GETBIT5(H0);
	register uint8_t b6  = GETBIT6(H0);
	register uint8_t b7  = GETBIT7(H0);
	
	*x = (b0 << 7) | (b1 << 5) | (b2 << 3) | (b3 << 1) 
	   | (b4 >> 1) | (b5 >> 3) | (b6 >> 5) | (b7 >> 7);
}

void REVERSE16(uint16_t* x)	// Sheesh
{
	register uint16_t H0  = *x;
	register uint16_t b0  = GETBIT0(H0);
	register uint16_t b1  = GETBIT1(H0);
	register uint16_t b2  = GETBIT2(H0);
	register uint16_t b3  = GETBIT3(H0);
	register uint16_t b4  = GETBIT4(H0);
	register uint16_t b5  = GETBIT5(H0);
	register uint16_t b6  = GETBIT6(H0);
	register uint16_t b7  = GETBIT7(H0);
	register uint16_t b8  = GETBIT8(H0);
	register uint16_t b9  = GETBIT9(H0);
	register uint16_t b10 = GETBIT10(H0);
	register uint16_t b11 = GETBIT11(H0);
	register uint16_t b12 = GETBIT12(H0);
	register uint16_t b13 = GETBIT13(H0);
	register uint16_t b14 = GETBIT14(H0);
	register uint16_t b15 = GETBIT15(H0);
	
	*x = (b0 << 15) | (b1 << 13) | (b2  << 11) | (b3  << 9) | (b4  << 7) | (b5  <<  5) | (b6  <<  3) | (b7  <<  1)
	   | (b8 >>  1) | (b9 >>  3) | (b10 >>  5) | (b11 >> 7) | (b12 >> 9) | (b13 >> 11) | (b14 >> 13) | (b15 >> 15);
}

void REVERSE32(uint32_t* x)	// My hands hurt
{
	register uint32_t H0  = *x;
	register uint32_t b0  = GETBIT0(H0);
	register uint32_t b1  = GETBIT1(H0);
	register uint32_t b2  = GETBIT2(H0);
	register uint32_t b3  = GETBIT3(H0);
	register uint32_t b4  = GETBIT4(H0);
	register uint32_t b5  = GETBIT5(H0);
	register uint32_t b6  = GETBIT6(H0);
	register uint32_t b7  = GETBIT7(H0);
	register uint32_t b8  = GETBIT8(H0);
	register uint32_t b9  = GETBIT9(H0);
	register uint32_t b10 = GETBIT10(H0);
	register uint32_t b11 = GETBIT11(H0);
	register uint32_t b12 = GETBIT12(H0);
	register uint32_t b13 = GETBIT13(H0);
	register uint32_t b14 = GETBIT14(H0);
	register uint32_t b15 = GETBIT15(H0);
	register uint32_t b16 = GETBIT16(H0);
	register uint32_t b17 = GETBIT17(H0);
	register uint32_t b18 = GETBIT18(H0);
	register uint32_t b19 = GETBIT19(H0);
	register uint32_t b20 = GETBIT20(H0);
	register uint32_t b21 = GETBIT21(H0);
	register uint32_t b22 = GETBIT22(H0);
	register uint32_t b23 = GETBIT23(H0);
	register uint32_t b24 = GETBIT24(H0);
	register uint32_t b25 = GETBIT25(H0);
	register uint32_t b26 = GETBIT26(H0);
	register uint32_t b27 = GETBIT27(H0);
	register uint32_t b28 = GETBIT28(H0);
	register uint32_t b29 = GETBIT29(H0);
	register uint32_t b30 = GETBIT30(H0);
	register uint32_t b31 = GETBIT31(H0);
	
	*x = (b0  << 31) | (b1  << 29) | (b2  << 27) | (b3  << 25) | (b4  << 23) | (b5  << 21) | (b6  << 19) | (b7  << 17) | (b8  << 15) | (b9  << 13) | (b10 << 11) | (b11 <<  9) | (b12 <<  7) | (b13 <<  5) | (b14 <<  3) | (b15 <<  1)
	   | (b16 >>  1) | (b17 >>  3) | (b18 >>  5) | (b19 >>  7) | (b20 >>  9) | (b21 >> 11) | (b22 >> 13) | (b23 >> 15) | (b24 >> 17) | (b25 >> 19) | (b26 >> 21) | (b27 >> 23) | (b28 >> 25) | (b29 >> 27) | (b30 >> 29) | (b31 >> 31);
}

void REVERSE64(uint64_t* x)	// Hello arthritis
{
	register uint64_t H0  = *x;
	register uint64_t b0  = GETBIT0(H0);
	register uint64_t b1  = GETBIT1(H0);
	register uint64_t b2  = GETBIT2(H0);
	register uint64_t b3  = GETBIT3(H0);
	register uint64_t b4  = GETBIT4(H0);
	register uint64_t b5  = GETBIT5(H0);
	register uint64_t b6  = GETBIT6(H0);
	register uint64_t b7  = GETBIT7(H0);
	register uint64_t b8  = GETBIT8(H0);
	register uint64_t b9  = GETBIT9(H0);
	register uint64_t b10 = GETBIT10(H0);
	register uint64_t b11 = GETBIT11(H0);
	register uint64_t b12 = GETBIT12(H0);
	register uint64_t b13 = GETBIT13(H0);
	register uint64_t b14 = GETBIT14(H0);
	register uint64_t b15 = GETBIT15(H0);
	register uint64_t b16 = GETBIT16(H0);
	register uint64_t b17 = GETBIT17(H0);
	register uint64_t b18 = GETBIT18(H0);
	register uint64_t b19 = GETBIT19(H0);
	register uint64_t b20 = GETBIT20(H0);
	register uint64_t b21 = GETBIT21(H0);
	register uint64_t b22 = GETBIT22(H0);
	register uint64_t b23 = GETBIT23(H0);
	register uint64_t b24 = GETBIT24(H0);
	register uint64_t b25 = GETBIT25(H0);
	register uint64_t b26 = GETBIT26(H0);
	register uint64_t b27 = GETBIT27(H0);
	register uint64_t b28 = GETBIT28(H0);
	register uint64_t b29 = GETBIT29(H0);
	register uint64_t b30 = GETBIT30(H0);
	register uint64_t b31 = GETBIT31(H0);
	register uint64_t b32 = GETBIT32(H0);
	register uint64_t b33 = GETBIT33(H0);
	register uint64_t b34 = GETBIT34(H0);
	register uint64_t b35 = GETBIT35(H0);
	register uint64_t b36 = GETBIT36(H0);
	register uint64_t b37 = GETBIT37(H0);
	register uint64_t b38 = GETBIT38(H0);
	register uint64_t b39 = GETBIT39(H0);
	register uint64_t b40 = GETBIT40(H0);
	register uint64_t b41 = GETBIT41(H0);
	register uint64_t b42 = GETBIT42(H0);
	register uint64_t b43 = GETBIT43(H0);
	register uint64_t b44 = GETBIT44(H0);
	register uint64_t b45 = GETBIT45(H0);
	register uint64_t b46 = GETBIT46(H0);
	register uint64_t b47 = GETBIT47(H0);
	register uint64_t b48 = GETBIT48(H0);
	register uint64_t b49 = GETBIT49(H0);
	register uint64_t b50 = GETBIT50(H0);
	register uint64_t b51 = GETBIT51(H0);
	register uint64_t b52 = GETBIT52(H0);
	register uint64_t b53 = GETBIT53(H0);
	register uint64_t b54 = GETBIT54(H0);
	register uint64_t b55 = GETBIT55(H0);
	register uint64_t b56 = GETBIT56(H0);
	register uint64_t b57 = GETBIT57(H0);
	register uint64_t b58 = GETBIT58(H0);
	register uint64_t b59 = GETBIT59(H0);
	register uint64_t b60 = GETBIT60(H0);
	register uint64_t b61 = GETBIT61(H0);
	register uint64_t b62 = GETBIT62(H0);
	register uint64_t b63 = GETBIT63(H0);
	
	*x = (b0  << 63) | (b1  << 61) | (b2  << 59) | (b3  << 57) | (b4  << 55) | (b5  << 53) | (b6  << 51) | (b7  << 49) | (b8  << 47) | (b9  << 45) | (b10 << 43) | (b11 << 41) | (b12 << 39) | (b13 << 37) | (b14 << 35) | (b15 << 33)
	   | (b16 << 31) | (b17 << 29) | (b18 << 27) | (b19 << 25) | (b20 << 23) | (b21 << 21) | (b22 << 19) | (b23 << 17) | (b24 << 15) | (b25 << 13) | (b26 << 11) | (b27 <<  9) | (b28 <<  7) | (b29 <<  5) | (b30 <<  3) | (b31 <<  1)
	   | (b63 >> 63) | (b62 >> 61) | (b61 >> 59) | (b60 >> 57) | (b59 >> 55) | (b58 >> 53) | (b57 >> 51) | (b56 >> 49) | (b55 >> 47) | (b54 >> 45) | (b53 >> 43) | (b52 >> 41) | (b51 >> 39) | (b50 >> 37) | (b49 >> 35) | (b48 >> 33)
	   | (b47 >> 31) | (b46 >> 29) | (b45 >> 27) | (b44 >> 25) | (b43 >> 23) | (b42 >> 21) | (b41 >> 19) | (b40 >> 17) | (b39 >> 15) | (b38 >> 13) | (b37 >> 11) | (b36 >>  9) | (b35 >>  7) | (b34 >>  5) | (b33 >>  3) | (b32 >>  1);
}

void sow(uint64_t* x, uint64_t* k, uint64_t decree)
{
	register uint64_t C     = *k; 	//5514838803201;
	register uint64_t faith = 0b0000000000000000000000000000000000000000000000000000000000000000 | (decree << 48);
	
	switch(decree % 7)
	{
		case 0 : ;
			 faith = GETBYTE0(C) |
			 	 GETBYTE1(C) |
			 	 GETBYTE2(C) |
			 	 GETBYTE3(C) |
			 	 GETBYTE4(C) |
			 	 GETBYTE5(C) ^
			 	 GETBYTE6(C);
			 break;
		case 1 : ;
			 faith = GETBYTE1_AS_BYTE0(C) |
			 	 GETBYTE2_AS_BYTE1(C) |
			 	 GETBYTE3_AS_BYTE2(C) |
			 	 GETBYTE4_AS_BYTE3(C) |
			 	 GETBYTE5_AS_BYTE4(C) |
			 	 GETBYTE6_AS_BYTE5(C) ^
			 	 GETBYTE0_AS_BYTE6(C);
			 break;
		case 2 : ;
			 faith = GETBYTE2_AS_BYTE0(C) |
			 	 GETBYTE3_AS_BYTE1(C) |
			 	 GETBYTE4_AS_BYTE2(C) |
			 	 GETBYTE5_AS_BYTE3(C) |
			 	 GETBYTE6_AS_BYTE4(C) |
			 	 GETBYTE0_AS_BYTE5(C) ^
			 	 GETBYTE1_AS_BYTE6(C);
			 break;
		case 3 : ;
			 faith = GETBYTE3_AS_BYTE0(C) |
			 	 GETBYTE4_AS_BYTE1(C) |
			 	 GETBYTE5_AS_BYTE2(C) |
			 	 GETBYTE6_AS_BYTE3(C) |
			 	 GETBYTE0_AS_BYTE4(C) |
			 	 GETBYTE1_AS_BYTE5(C) ^
			 	 GETBYTE2_AS_BYTE6(C);
			 break;
		case 4 : ;
			 faith = GETBYTE4_AS_BYTE0(C) |
			 	 GETBYTE5_AS_BYTE1(C) |
			 	 GETBYTE6_AS_BYTE2(C) |
			 	 GETBYTE0_AS_BYTE3(C) |
			 	 GETBYTE1_AS_BYTE4(C) |
			 	 GETBYTE2_AS_BYTE5(C) ^
			 	 GETBYTE3_AS_BYTE6(C);
			 break;
		case 5 : ;
			 faith = GETBYTE5_AS_BYTE0(C) |
			 	 GETBYTE6_AS_BYTE1(C) |
			 	 GETBYTE0_AS_BYTE2(C) |
			 	 GETBYTE1_AS_BYTE3(C) |
			 	 GETBYTE2_AS_BYTE4(C) |
			 	 GETBYTE3_AS_BYTE5(C) ^
			 	 GETBYTE4_AS_BYTE6(C);
			 break;
		case 6 : ;
			 faith = GETBYTE6_AS_BYTE0(C) |
			 	 GETBYTE0_AS_BYTE1(C) |
			 	 GETBYTE1_AS_BYTE2(C) |
			 	 GETBYTE2_AS_BYTE3(C) |
			 	 GETBYTE3_AS_BYTE4(C) |
			 	 GETBYTE4_AS_BYTE5(C) ^
			 	 GETBYTE5_AS_BYTE6(C);
	}
	*x ^= faith;
}

void til(uint64_t* x, uint64_t* k, uint64_t decree)
{
	uint64_t  S     = *k;
	uint64_t  field = *x;
	uint32_t* ptr32 = (uint32_t*)(&field);
	uint16_t* ptr16 = (uint16_t*)(&field);
	uint8_t* ptr8   =  (uint8_t*)(&field);
	switch (decree % 3)
	{
		case 0 :
			//REVERSE64(&field);		// Reverse 64 bits 
			//field >>= 8;			// Shift one byte right to get rid of the zeroed out 8th byte that is now in the first byte's place
			//REVERSE32(ptr32);		// The rest is like a wave crashing back and forth in a tank
			//REVERSE16(ptr16 + 4);
			break;
		case 1 :
			break;
		case 2 :
	}
	*x = field;
	// cultivated, intervening event, other
}

void printbits_debug(uint64_t i)	
{
	register char j;
	for (j = 63; j >= 0; --j)
	{
		if (((i >> j) & 1))
			putc('1', stdout);
		else
			putc('0', stdout);
		if (j % 8 == 0)
			putc(' ', stdout);
	}
	putc('\n', stdout);
}

#endif

